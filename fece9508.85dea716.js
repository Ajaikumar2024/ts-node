(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{81:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return p}));var r=t(3),a=t(7),o=(t(0),t(86)),i={title:"Integrations"},s={unversionedId:"integrations",id:"integrations",isDocsHomePage:!1,title:"Integrations",description:"Guides for using ts-node alongside test runners, build systems, and editors.",source:"@site/docs/integrations.md",slug:"/integrations",permalink:"/ts-node/docs/integrations",editUrl:"https://github.com/TypeStrong/ts-node/edit/master/website/docs/integrations.md",version:"current",sidebar:"primarySidebar",previous:{title:"Imports: CommonJS vs native modules",permalink:"/ts-node/docs/imports"},next:{title:"Shebang",permalink:"/ts-node/docs/shebang"}},c=[{value:"Mocha",id:"mocha",children:[]},{value:"Tape",id:"tape",children:[]},{value:"Gulp",id:"gulp",children:[]},{value:"Visual Studio Code",id:"visual-studio-code",children:[]},{value:"IntelliJ (and WebStorm)",id:"intellij-and-webstorm",children:[]}],l={toc:c};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Guides for using ts-node alongside test runners, build systems, and editors."),Object(o.b)("h3",{id:"mocha"},"Mocha"),Object(o.b)("p",null,"Mocha 6"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),'mocha --require ts-node/register --watch-extensions ts,tsx "test/**/*.{ts,tsx}" [...args]\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," ",Object(o.b)("inlineCode",{parentName:"p"},"--watch-extensions")," is only used in ",Object(o.b)("inlineCode",{parentName:"p"},"--watch")," mode."),Object(o.b)("p",null,"Mocha 7"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"mocha --require ts-node/register --extensions ts,tsx --watch --watch-files src 'tests/**/*.{ts,tsx}' [...args]\n")),Object(o.b)("h3",{id:"tape"},"Tape"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"ts-node node_modules/tape/bin/tape [...args]\n")),Object(o.b)("h3",{id:"gulp"},"Gulp"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sh"}),"# Create a `gulpfile.ts` and run `gulp`.\ngulp\n")),Object(o.b)("h3",{id:"visual-studio-code"},"Visual Studio Code"),Object(o.b)("p",null,"Create a new node.js configuration, add ",Object(o.b)("inlineCode",{parentName:"p"},"-r ts-node/register")," to node args and move the ",Object(o.b)("inlineCode",{parentName:"p"},"program")," to the ",Object(o.b)("inlineCode",{parentName:"p"},"args")," list (so VS Code doesn't look for ",Object(o.b)("inlineCode",{parentName:"p"},"outFiles"),")."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "type": "node",\n    "request": "launch",\n    "name": "Launch Program",\n    "runtimeArgs": [\n        "-r",\n        "ts-node/register"\n    ],\n    "args": [\n        "${workspaceFolder}/index.ts"\n    ]\n}\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," If you are using the ",Object(o.b)("inlineCode",{parentName:"p"},"--project <tsconfig.json>")," command line argument as per the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"configuration"}),"Configuration Options"),', and want to apply this same behavior when launching in VS Code, add an "env" key into the launch configuration: ',Object(o.b)("inlineCode",{parentName:"p"},'"env": { "TS_NODE_PROJECT": "<tsconfig.json>" }'),"."),Object(o.b)("h3",{id:"intellij-and-webstorm"},"IntelliJ (and WebStorm)"),Object(o.b)("p",null,"Create a new Node.js configuration and add ",Object(o.b)("inlineCode",{parentName:"p"},"-r ts-node/register"),' to "Node parameters."'),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," If you are using the ",Object(o.b)("inlineCode",{parentName:"p"},"--project <tsconfig.json>")," command line argument as per the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"configuration"}),"Configuration Options"),', and want to apply this same behavior when launching in IntelliJ, specify under "Environment Variables": ',Object(o.b)("inlineCode",{parentName:"p"},"TS_NODE_PROJECT=<tsconfig.json>"),"."))}p.isMDXComponent=!0},86:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(t),b=r,m=u["".concat(i,".").concat(b)]||u[b]||d[b]||o;return t?a.a.createElement(m,s(s({ref:n},l),{},{components:t})):a.a.createElement(m,s({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=b;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);