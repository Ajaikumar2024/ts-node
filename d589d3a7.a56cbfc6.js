(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{123:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/logo-073c69d4a23f7391b54bab6bd23933e7.svg"},78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return c}));var a=n(3),i=n(7),o=(n(0),n(88)),r={title:"Getting Started",slug:"/"},p={unversionedId:"getting-started",id:"getting-started",isDocsHomePage:!1,title:"Getting Started",description:"TypeScript Node",source:"@site/docs/getting-started.md",slug:"/",permalink:"/docs/",editUrl:"https://github.com/TypeStrong/ts-node/edit/master/website/docs/getting-started.md",version:"current",sidebar:"primarySidebar",next:{title:"Configuration",permalink:"/docs/configuration"}},s=[{value:"<em>Experimental ESM support</em>",id:"experimental-esm-support",children:[]},{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Shell",id:"shell",children:[]},{value:"Shebang",id:"shebang",children:[]},{value:"Programmatic",id:"programmatic",children:[]},{value:"Mocha",id:"mocha",children:[]},{value:"Tape",id:"tape",children:[]},{value:"Gulp",id:"gulp",children:[]},{value:"Visual Studio Code",id:"visual-studio-code",children:[]},{value:"IntelliJ (and WebStorm)",id:"intellij-and-webstorm",children:[]}]},{value:"How It Works",id:"how-it-works",children:[]},{value:"Loading <code>tsconfig.json</code>",id:"loading-tsconfigjson",children:[]},{value:"Configuration Options",id:"configuration-options",children:[{value:"CLI Options",id:"cli-options",children:[]},{value:"CLI and Programmatic Options",id:"cli-and-programmatic-options",children:[]},{value:"Programmatic-only Options",id:"programmatic-only-options",children:[]},{value:"Options via tsconfig.json",id:"options-via-tsconfigjson",children:[]}]},{value:"SyntaxError",id:"syntaxerror",children:[{value:"Import Statements",id:"import-statements",children:[]}]},{value:"Help! My Types Are Missing!",id:"help-my-types-are-missing",children:[]},{value:"Watching and Restarting",id:"watching-and-restarting",children:[]},{value:"License",id:"license",children:[]}],l={toc:s};function c(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("img",{alt:"TypeScript Node",src:n(123).default})),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://npmjs.org/package/ts-node"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/npm/v/ts-node.svg?style=flat",alt:"NPM version"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://npmjs.org/package/ts-node"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/npm/dm/ts-node.svg?style=flat",alt:"NPM downloads"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/TypeStrong/ts-node/actions?query=workflow%3A%22Continuous+Integration%22"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://img.shields.io/github/workflow/status/TypeStrong/ts-node/Continuous%20Integration",alt:"Build status"}))),"\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://codecov.io/gh/TypeStrong/ts-node"}),Object(o.b)("img",Object(a.a)({parentName:"a"},{src:"https://codecov.io/gh/TypeStrong/ts-node/branch/master/graph/badge.svg",alt:"Test coverage"})))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"TypeScript execution and REPL for node.js, with source map support. ",Object(o.b)("strong",{parentName:"p"},"Works with ",Object(o.b)("inlineCode",{parentName:"strong"},"typescript@>=2.7")),".")),Object(o.b)("h3",{id:"experimental-esm-support"},Object(o.b)("em",{parentName:"h3"},"Experimental ESM support")),Object(o.b)("p",null,"Native ESM support is currently experimental. For usage, limitations, and to provide feedback, see ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/TypeStrong/ts-node/issues/1007"}),"#1007"),"."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"# Locally in your project.\nnpm install -D typescript\nnpm install -D ts-node\n\n# Or globally with TypeScript.\nnpm install -g typescript\nnpm install -g ts-node\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Tip:")," Installing modules locally allows you to control and share the versions through ",Object(o.b)("inlineCode",{parentName:"p"},"package.json"),". TS Node will always resolve the compiler from ",Object(o.b)("inlineCode",{parentName:"p"},"cwd")," before checking relative to its own installation."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("h3",{id:"shell"},"Shell"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"# Execute a script as `node` + `tsc`.\nts-node script.ts\n\n# Starts a TypeScript REPL.\nts-node\n\n# Execute code with TypeScript.\nts-node -e 'console.log(\"Hello, world!\")'\n\n# Execute, and print, code with TypeScript.\nts-node -p -e '\"Hello, world!\"'\n\n# Pipe scripts to execute with TypeScript.\necho 'console.log(\"Hello, world!\")' | ts-node\n\n# Equivalent to ts-node --script-mode\nts-node-script scripts.ts\n\n# Equivalent to ts-node --transpile-only\nts-node-transpile-only scripts.ts\n")),Object(o.b)("p",null,Object(o.b)("img",Object(a.a)({parentName:"p"},{src:"https://github.com/TypeStrong/ts-node/raw/master/screenshot.png",alt:"TypeScript REPL"}))),Object(o.b)("h3",{id:"shebang"},"Shebang"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'#!/usr/bin/env ts-node-script\n\nconsole.log("Hello, world!")\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"ts-node-script")," is recommended because it enables ",Object(o.b)("inlineCode",{parentName:"p"},"--script-mode"),", discovering ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json")," relative to the script's location instead of ",Object(o.b)("inlineCode",{parentName:"p"},"process.cwd()"),".  This makes scripts more portable."),Object(o.b)("p",null,"Passing CLI arguments via shebang is allowed on Mac but not Linux.  For example, the following will fail on Linux:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"#!/usr/bin/env ts-node --script-mode --transpile-only --files\n// This shebang is not portable.  It only works on Mac\n")),Object(o.b)("h3",{id:"programmatic"},"Programmatic"),Object(o.b)("p",null,"You can require ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node")," and register the loader for future requires by using ",Object(o.b)("inlineCode",{parentName:"p"},"require('ts-node').register({ /* options */ })"),". You can also use file shortcuts - ",Object(o.b)("inlineCode",{parentName:"p"},"node -r ts-node/register")," or ",Object(o.b)("inlineCode",{parentName:"p"},"node -r ts-node/register/transpile-only")," - depending on your preferences."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," If you need to use advanced node.js CLI arguments (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"--inspect"),"), use them with ",Object(o.b)("inlineCode",{parentName:"p"},"node -r ts-node/register")," instead of the ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node")," CLI."),Object(o.b)("h4",{id:"developers"},"Developers"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TS Node")," exports a ",Object(o.b)("inlineCode",{parentName:"p"},"create()")," function that can be used to initialize a TypeScript compiler that isn't registered to ",Object(o.b)("inlineCode",{parentName:"p"},"require.extensions"),", and it uses the same code as ",Object(o.b)("inlineCode",{parentName:"p"},"register"),"."),Object(o.b)("h3",{id:"mocha"},"Mocha"),Object(o.b)("p",null,"Mocha 6"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),'mocha --require ts-node/register --watch-extensions ts,tsx "test/**/*.{ts,tsx}" [...args]\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," ",Object(o.b)("inlineCode",{parentName:"p"},"--watch-extensions")," is only used in ",Object(o.b)("inlineCode",{parentName:"p"},"--watch")," mode."),Object(o.b)("p",null,"Mocha 7"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"mocha --require ts-node/register --extensions ts,tsx --watch --watch-files src 'tests/**/*.{ts,tsx}' [...args]\n")),Object(o.b)("h3",{id:"tape"},"Tape"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"ts-node node_modules/tape/bin/tape [...args]\n")),Object(o.b)("h3",{id:"gulp"},"Gulp"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"# Create a `gulpfile.ts` and run `gulp`.\ngulp\n")),Object(o.b)("h3",{id:"visual-studio-code"},"Visual Studio Code"),Object(o.b)("p",null,"Create a new node.js configuration, add ",Object(o.b)("inlineCode",{parentName:"p"},"-r ts-node/register")," to node args and move the ",Object(o.b)("inlineCode",{parentName:"p"},"program")," to the ",Object(o.b)("inlineCode",{parentName:"p"},"args")," list (so VS Code doesn't look for ",Object(o.b)("inlineCode",{parentName:"p"},"outFiles"),")."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n    "type": "node",\n    "request": "launch",\n    "name": "Launch Program",\n    "runtimeArgs": [\n        "-r",\n        "ts-node/register"\n    ],\n    "args": [\n        "${workspaceFolder}/index.ts"\n    ]\n}\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," If you are using the ",Object(o.b)("inlineCode",{parentName:"p"},"--project <tsconfig.json>")," command line argument as per the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#configuration-options"}),"Configuration Options"),', and want to apply this same behavior when launching in VS Code, add an "env" key into the launch configuration: ',Object(o.b)("inlineCode",{parentName:"p"},'"env": { "TS_NODE_PROJECT": "<tsconfig.json>" }'),"."),Object(o.b)("h3",{id:"intellij-and-webstorm"},"IntelliJ (and WebStorm)"),Object(o.b)("p",null,"Create a new Node.js configuration and add ",Object(o.b)("inlineCode",{parentName:"p"},"-r ts-node/register"),' to "Node parameters."'),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," If you are using the ",Object(o.b)("inlineCode",{parentName:"p"},"--project <tsconfig.json>")," command line argument as per the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#configuration-options"}),"Configuration Options"),', and want to apply this same behavior when launching in IntelliJ, specify under "Environment Variables": ',Object(o.b)("inlineCode",{parentName:"p"},"TS_NODE_PROJECT=<tsconfig.json>"),"."),Object(o.b)("h2",{id:"how-it-works"},"How It Works"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TypeScript Node")," works by registering the TypeScript compiler for ",Object(o.b)("inlineCode",{parentName:"p"},".ts"),", ",Object(o.b)("inlineCode",{parentName:"p"},".tsx"),", ",Object(o.b)("inlineCode",{parentName:"p"},".js"),", and ",Object(o.b)("inlineCode",{parentName:"p"},".jsx")," extensions.\n",Object(o.b)("inlineCode",{parentName:"p"},".js")," and ",Object(o.b)("inlineCode",{parentName:"p"},".jsx")," are only registered when ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/compiler-options.html#compiler-options"}),Object(o.b)("inlineCode",{parentName:"a"},"allowJs"))," is enabled.\n",Object(o.b)("inlineCode",{parentName:"p"},".tsx")," and ",Object(o.b)("inlineCode",{parentName:"p"},".jsx")," are only registered when ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/jsx.html"}),Object(o.b)("inlineCode",{parentName:"a"},"jsx"))," is enabled.\nWhen node.js has an extension registered (via ",Object(o.b)("inlineCode",{parentName:"p"},"require.extensions"),"), it will use the extension internally for module resolution. When an extension is unknown to node.js, it handles the file as ",Object(o.b)("inlineCode",{parentName:"p"},".js")," (JavaScript). By default, ",Object(o.b)("strong",{parentName:"p"},"TypeScript Node")," avoids compiling files in ",Object(o.b)("inlineCode",{parentName:"p"},"/node_modules/")," for three reasons:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Modules should always be published in a format node.js can consume"),Object(o.b)("li",{parentName:"ol"},"Transpiling the entire dependency tree will make your project slower"),Object(o.b)("li",{parentName:"ol"},"Differing behaviours between TypeScript and node.js (e.g. ES2015 modules) can result in a project that works until you decide to support a feature natively from node.js")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"P.S.")," This means if you don't register an extension, it is compiled as JavaScript. When ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node")," is used with ",Object(o.b)("inlineCode",{parentName:"p"},"allowJs"),", JavaScript files are transpiled using the TypeScript compiler."),Object(o.b)("h2",{id:"loading-tsconfigjson"},"Loading ",Object(o.b)("inlineCode",{parentName:"h2"},"tsconfig.json")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Typescript Node")," loads ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json")," automatically. Use ",Object(o.b)("inlineCode",{parentName:"p"},"--skip-project")," to skip loading the ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),Object(o.b)("p",null,"It is resolved relative to ",Object(o.b)("inlineCode",{parentName:"p"},"--dir")," using ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html"}),"the same search behavior as ",Object(o.b)("inlineCode",{parentName:"a"},"tsc")),".  In ",Object(o.b)("inlineCode",{parentName:"p"},"--script-mode"),", this is the directory containing the script.  Otherwise it is resolved relative to ",Object(o.b)("inlineCode",{parentName:"p"},"process.cwd()"),", which matches the behavior of ",Object(o.b)("inlineCode",{parentName:"p"},"tsc"),"."),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"--project")," to specify the path to your ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json"),", ignoring ",Object(o.b)("inlineCode",{parentName:"p"},"--dir"),"."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Tip"),": You can use ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node")," together with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/tsconfig-paths"}),"tsconfig-paths")," to load modules according to the ",Object(o.b)("inlineCode",{parentName:"p"},"paths")," section in ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),Object(o.b)("h2",{id:"configuration-options"},"Configuration Options"),Object(o.b)("p",null,"You can set options by passing them before the script path, via programmatic usage, via ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json"),", or via environment variables."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"ts-node --compiler ntypescript --project src/tsconfig.json hello-world.ts\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/TypeStrong/ntypescript#readme"}),Object(o.b)("inlineCode",{parentName:"a"},"ntypescript"))," is an example of a TypeScript-compatible ",Object(o.b)("inlineCode",{parentName:"p"},"compiler"),"."),Object(o.b)("h3",{id:"cli-options"},"CLI Options"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"ts-node")," supports ",Object(o.b)("inlineCode",{parentName:"p"},"--print")," (",Object(o.b)("inlineCode",{parentName:"p"},"-p"),"), ",Object(o.b)("inlineCode",{parentName:"p"},"--eval")," (",Object(o.b)("inlineCode",{parentName:"p"},"-e"),"), ",Object(o.b)("inlineCode",{parentName:"p"},"--require")," (",Object(o.b)("inlineCode",{parentName:"p"},"-r"),") and ",Object(o.b)("inlineCode",{parentName:"p"},"--interactive")," (",Object(o.b)("inlineCode",{parentName:"p"},"-i"),") similar to the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://nodejs.org/api/cli.html"}),"node.js CLI options"),"."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-h, --help")," Prints the help text"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-v, --version")," Prints the version. ",Object(o.b)("inlineCode",{parentName:"li"},"-vv")," prints node and typescript compiler versions, too"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-s, --script-mode")," Resolve config relative to the directory of the passed script instead of the current directory. Changes default of ",Object(o.b)("inlineCode",{parentName:"li"},"--dir"))),Object(o.b)("h3",{id:"cli-and-programmatic-options"},"CLI and Programmatic Options"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"The name of the environment variable and the option's default value are denoted in parentheses.")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-T, --transpile-only")," Use TypeScript's faster ",Object(o.b)("inlineCode",{parentName:"li"},"transpileModule")," (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_TRANSPILE_ONLY"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-H, --compiler-host")," Use TypeScript's compiler host API (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_COMPILER_HOST"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-I, --ignore [pattern]")," Override the path patterns to skip compilation (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_IGNORE"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"/node_modules/"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-P, --project [path]")," Path to TypeScript JSON project file (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_PROJECT"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-C, --compiler [name]")," Specify a custom TypeScript compiler (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_COMPILER"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"typescript"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-D, --ignore-diagnostics [code]")," Ignore TypeScript warnings by diagnostic code (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_IGNORE_DIAGNOSTICS"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"-O, --compiler-options [opts]")," JSON object to merge with compiler options (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_COMPILER_OPTIONS"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--dir")," Specify working directory for config resolution (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_CWD"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"process.cwd()"),", or ",Object(o.b)("inlineCode",{parentName:"li"},"dirname(scriptPath)")," if ",Object(o.b)("inlineCode",{parentName:"li"},"--script-mode"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--scope")," Scope compiler to files within ",Object(o.b)("inlineCode",{parentName:"li"},"cwd")," (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_SCOPE"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--files")," Load ",Object(o.b)("inlineCode",{parentName:"li"},"files"),", ",Object(o.b)("inlineCode",{parentName:"li"},"include")," and ",Object(o.b)("inlineCode",{parentName:"li"},"exclude")," from ",Object(o.b)("inlineCode",{parentName:"li"},"tsconfig.json")," on startup (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_FILES"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--pretty")," Use pretty diagnostic formatter (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_PRETTY"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--skip-project")," Skip project config resolution and loading (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_SKIP_PROJECT"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--skip-ignore")," Skip ignore checks (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_SKIP_IGNORE"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--emit")," Emit output files into ",Object(o.b)("inlineCode",{parentName:"li"},".ts-node")," directory (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_EMIT"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--prefer-ts-exts")," Re-order file extensions so that TypeScript imports are preferred (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_PREFER_TS_EXTS"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"--log-error")," Logs TypeScript errors to stderr instead of throwing exceptions (",Object(o.b)("inlineCode",{parentName:"li"},"TS_NODE_LOG_ERROR"),", default: ",Object(o.b)("inlineCode",{parentName:"li"},"false"),")")),Object(o.b)("h3",{id:"programmatic-only-options"},"Programmatic-only Options"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"transformers")," ",Object(o.b)("inlineCode",{parentName:"li"},"_ts.CustomTransformers | ((p: _ts.Program) => _ts.CustomTransformers)"),": An object with transformers or a factory function that accepts a program and returns a transformers object to pass to TypeScript. Factory function cannot be used with ",Object(o.b)("inlineCode",{parentName:"li"},"transpileOnly")," flag"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"readFile"),": Custom TypeScript-compatible file reading function"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"fileExists"),": Custom TypeScript-compatible file existence function")),Object(o.b)("h3",{id:"options-via-tsconfigjson"},"Options via tsconfig.json"),Object(o.b)("p",null,"Most options can be specified by a ",Object(o.b)("inlineCode",{parentName:"p"},'"ts-node"')," object in ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json")," using their programmatic, camelCase names. For example, to enable ",Object(o.b)("inlineCode",{parentName:"p"},"--transpile-only"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'// tsconfig.json\n{\n  "ts-node": {\n    "transpileOnly": true\n  },\n  "compilerOptions": {}\n}\n')),Object(o.b)("p",null,"Our bundled ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://unpkg.com/browse/ts-node@8.8.2/tsconfig.schema.json"}),"JSON schema")," lists all compatible options."),Object(o.b)("h2",{id:"syntaxerror"},"SyntaxError"),Object(o.b)("p",null,"Any error that is not a ",Object(o.b)("inlineCode",{parentName:"p"},"TSError")," is from node.js (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"SyntaxError"),"), and cannot be fixed by TypeScript or ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node"),". These are runtime issues with your code."),Object(o.b)("h3",{id:"import-statements"},"Import Statements"),Object(o.b)("p",null,"There are two options when using ",Object(o.b)("inlineCode",{parentName:"p"},"import")," statements: compile them to CommonJS or use node's native ESM support."),Object(o.b)("p",null,"To compile to CommonJS, you must set ",Object(o.b)("inlineCode",{parentName:"p"},'"module": "CommonJS"')," in your ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json")," or compiler options."),Object(o.b)("p",null,"Node's native ESM support is currently experimental and so is ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node"),"'s ESM loader hook.  For usage, limitations, and to provide feedback, see ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/TypeStrong/ts-node/issues/1007"}),"#1007"),"."),Object(o.b)("h2",{id:"help-my-types-are-missing"},"Help! My Types Are Missing!"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TypeScript Node")," does ",Object(o.b)("em",{parentName:"p"},"not")," use ",Object(o.b)("inlineCode",{parentName:"p"},"files"),", ",Object(o.b)("inlineCode",{parentName:"p"},"include")," or ",Object(o.b)("inlineCode",{parentName:"p"},"exclude"),", by default. This is because a large majority projects do not use all of the files in a project directory (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"Gulpfile.ts"),", runtime vs tests) and parsing every file for types slows startup time. Instead, ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node")," starts with the script file (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node index.ts"),") and TypeScript resolves dependencies based on imports and references."),Object(o.b)("p",null,"For global definitions, you can use the ",Object(o.b)("inlineCode",{parentName:"p"},"typeRoots")," compiler option.  This requires that your type definitions be structured as type packages (not loose TypeScript definition files). More details on how this works can be found in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#types-typeroots-and-types"}),"TypeScript Handbook"),"."),Object(o.b)("p",null,"Example ",Object(o.b)("inlineCode",{parentName:"p"},"tsconfig.json"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "typeRoots" : ["./node_modules/@types", "./typings"]\n  }\n}\n')),Object(o.b)("p",null,"Example project structure:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-text"}),"<project_root>/\n-- tsconfig.json\n-- typings/\n  -- <module_name>/\n    -- index.d.ts\n")),Object(o.b)("p",null,"Example module declaration file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"declare module '<module_name>' {\n    // module definitions go here\n}\n")),Object(o.b)("p",null,"For module definitions, you can use ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping"}),Object(o.b)("inlineCode",{parentName:"a"},"paths")),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "custom-module-type": ["types/custom-module-type"]\n    }\n  }\n}\n')),Object(o.b)("p",null,"An alternative approach for definitions of third-party libraries are ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html"}),"triple-slash directives"),". This may be helpful if you prefer not to change your TypeScript ",Object(o.b)("inlineCode",{parentName:"p"},"compilerOptions")," or structure your custom type definitions when using ",Object(o.b)("inlineCode",{parentName:"p"},"typeRoots"),". Below is an example of the triple-slash directive as a relative path within your project:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),'/// <reference types="./types/untyped_js_lib" />\nimport UntypedJsLib from "untyped_js_lib"\n')),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Tip:")," If you ",Object(o.b)("em",{parentName:"p"},"must")," use ",Object(o.b)("inlineCode",{parentName:"p"},"files"),", ",Object(o.b)("inlineCode",{parentName:"p"},"include"),", or ",Object(o.b)("inlineCode",{parentName:"p"},"exclude"),", enable ",Object(o.b)("inlineCode",{parentName:"p"},"--files")," flags or set ",Object(o.b)("inlineCode",{parentName:"p"},"TS_NODE_FILES=true"),"."),Object(o.b)("h2",{id:"watching-and-restarting"},"Watching and Restarting"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TypeScript Node")," compiles source code via ",Object(o.b)("inlineCode",{parentName:"p"},"require()"),", watching files and code reloads are out of scope for the project. If you want to restart the ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node")," process on file change, existing node.js tools such as ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/remy/nodemon"}),"nodemon"),", ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Qard/onchange"}),"onchange")," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/fgnass/node-dev"}),"node-dev")," work."),Object(o.b)("p",null,"There's also ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/whitecolor/ts-node-dev"}),Object(o.b)("inlineCode",{parentName:"a"},"ts-node-dev")),", a modified version of ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/fgnass/node-dev"}),Object(o.b)("inlineCode",{parentName:"a"},"node-dev"))," using ",Object(o.b)("inlineCode",{parentName:"p"},"ts-node")," for compilation that will restart the process on file change."),Object(o.b)("h2",{id:"license"},"License"),Object(o.b)("p",null,"MIT"))}c.isMDXComponent=!0}}]);