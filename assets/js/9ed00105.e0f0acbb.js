(self.webpackChunk_ts_node_website=self.webpackChunk_ts_node_website||[]).push([[4],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return u}});var o=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=o.createContext({}),p=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return o.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),f=p(t),u=i,m=f["".concat(l,".").concat(u)]||f[u]||d[u]||a;return t?o.createElement(m,r(r({ref:n},c),{},{components:t})):o.createElement(m,r({ref:n},c))}));function u(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,r=new Array(a);r[0]=f;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<a;p++)r[p]=t[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},970:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return r},metadata:function(){return s},toc:function(){return l},default:function(){return c}});var o=t(2122),i=t(9756),a=(t(7294),t(3905)),r={title:"Configuration"},s={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"ts-node supports a variety of options which can be specified via tsconfig.json, as CLI flags, as environment variables, or programmatically.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/ts-node/docs/configuration",editUrl:"https://github.com/TypeStrong/ts-node/edit/docs/website/docs/configuration.md",version:"current",frontMatter:{title:"Configuration"},sidebar:"primarySidebar",previous:{title:"Usage",permalink:"/ts-node/docs/usage"},next:{title:"Options",permalink:"/ts-node/docs/options"}},l=[{value:"CLI flags",id:"cli-flags",children:[]},{value:"Via tsconfig.json (recommended)",id:"via-tsconfigjson-recommended",children:[{value:"@tsconfig/bases",id:"tsconfigbases",children:[]},{value:"Default config",id:"default-config",children:[]}]},{value:"<code>node</code> flags",id:"node-flags",children:[]}],p={toc:l};function c(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"ts-node supports a variety of options which can be specified via ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", as CLI flags, as environment variables, or programmatically."),(0,a.kt)("p",null,"For a complete list, see ",(0,a.kt)("a",{parentName:"p",href:"/ts-node/docs/options"},"Options"),"."),(0,a.kt)("h2",{id:"cli-flags"},"CLI flags"),(0,a.kt)("p",null,"ts-node CLI flags must come ",(0,a.kt)("em",{parentName:"p"},"before")," the entrypoint script. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ ts-node --project tsconfig-dev.json say-hello.ts Ronald\nHello, Ronald!\n")),(0,a.kt)("h2",{id:"via-tsconfigjson-recommended"},"Via tsconfig.json (recommended)"),(0,a.kt)("p",null,"ts-node automatically finds and loads ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),".  Most ts-node options can be specified in a ",(0,a.kt)("inlineCode",{parentName:"p"},'"ts-node"')," object using their programmatic, camelCase names. We recommend this because it works even when you cannot pass CLI flags, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"node --require ts-node/register")," and when using shebangs."),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"--skipProject")," to skip loading the ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),".  Use ",(0,a.kt)("inlineCode",{parentName:"p"},"--project")," to explicitly specify the path to a ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,a.kt)("p",null,"When searching, it is resolved using ",(0,a.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html"},"the same search behavior as ",(0,a.kt)("inlineCode",{parentName:"a"},"tsc")),". By default, this search is performed relative to the entrypoint script. In ",(0,a.kt)("inlineCode",{parentName:"p"},"--cwdMode")," or if no entrypoint is specified -- for example when using the REPL -- the search is performed relative to ",(0,a.kt)("inlineCode",{parentName:"p"},"--cwd")," / ",(0,a.kt)("inlineCode",{parentName:"p"},"process.cwd()"),"."),(0,a.kt)("p",null,"You can use this sample configuration as a starting point:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  // This is an alias to @tsconfig/node12: https://github.com/tsconfig/bases\n  "extends": "ts-node/node12/tsconfig.json",\n\n  // Most ts-node options can be specified here using their programmatic names.\n  "ts-node": {\n    // It is faster to skip typechecking.\n    // Remove if you want ts-node to do typechecking.\n    "transpileOnly": true,\n\n    "files": true,\n\n    "compilerOptions": {\n      // compilerOptions specified here will override those declared below,\n      // but *only* in ts-node.  Useful if you want ts-node and tsc to use\n      // different options with a single tsconfig.json.\n    }\n  },\n  "compilerOptions": {\n    // typescript options here\n  }\n}\n')),(0,a.kt)("p",null,"Our bundled ",(0,a.kt)("a",{parentName:"p",href:"https://unpkg.com/browse/ts-node@latest/tsconfig.schema.json"},"JSON schema")," lists all compatible options."),(0,a.kt)("h3",{id:"tsconfigbases"},"@tsconfig/bases"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/tsconfig/bases"},"@tsconfig/bases")," maintains recommended configurations for several node versions.\nAs a convenience, these are bundled with ts-node."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "extends": "ts-node/node16/tsconfig.json",\n\n  // Or install directly with `npm i -D @tsconfig/node16`\n  "extends": "@tsconfig/node16/tsconfig.json",\n}\n')),(0,a.kt)("h3",{id:"default-config"},"Default config"),(0,a.kt)("p",null,"If no ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," is loaded from disk, ts-node will use the newest recommended defaults from\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tsconfig/bases/"},"@tsconfig/bases")," compatible with your ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"typescript")," versions.\nWith the latest ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"typescript"),", this is ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tsconfig/bases/blob/master/bases/node16.json"},(0,a.kt)("inlineCode",{parentName:"a"},"@tsconfig/node16")),"."),(0,a.kt)("p",null,"Older versions of ",(0,a.kt)("inlineCode",{parentName:"p"},"typescript")," are incompatible with ",(0,a.kt)("inlineCode",{parentName:"p"},"@tsconfig/node16"),".  In those cases we will use an older default configuration."),(0,a.kt)("p",null,"When in doubt, ",(0,a.kt)("inlineCode",{parentName:"p"},"ts-node --showConfig")," will log the configuration being used, and ",(0,a.kt)("inlineCode",{parentName:"p"},"ts-node -vv")," will log ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"typescript")," versions."),(0,a.kt)("h2",{id:"node-flags"},(0,a.kt)("inlineCode",{parentName:"h2"},"node")," flags"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/api/cli.html"},(0,a.kt)("inlineCode",{parentName:"a"},"node")," flags")," must be passed directly to ",(0,a.kt)("inlineCode",{parentName:"p"},"node"),"; they cannot be passed to the ts-node binary nor can they be specified in ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")),(0,a.kt)("p",null,"We recommend using the ",(0,a.kt)("a",{parentName:"p",href:"https://nodejs.org/api/cli.html#cli_node_options_options"},(0,a.kt)("inlineCode",{parentName:"a"},"NODE_OPTIONS"))," environment variable to pass options to ",(0,a.kt)("inlineCode",{parentName:"p"},"node"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"NODE_OPTIONS='--trace-deprecation --abort-on-uncaught-exception' ts-node ./index.ts\n")),(0,a.kt)("p",null,"Alternatively, you can invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"node")," directly and install ts-node via ",(0,a.kt)("inlineCode",{parentName:"p"},"--require"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"-r")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"node --trace-deprecation --abort-on-uncaught-exception -r ts-node/register ./index.ts\n")))}c.isMDXComponent=!0}}]);