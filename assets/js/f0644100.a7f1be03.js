(self.webpackChunk_ts_node_website=self.webpackChunk_ts_node_website||[]).push([[771],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7628:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var o=n(2122),r=n(9756),i=(n(7294),n(3905)),a={title:"paths and baseUrl\n"},s={unversionedId:"paths",id:"paths",isDocsHomePage:!1,title:"paths and baseUrl\n",description:"You can use ts-node together with tsconfig-paths to load modules according to the paths section in tsconfig.json.",source:"@site/docs/paths.md",sourceDirName:".",slug:"/paths",permalink:"/ts-node/docs/paths",editUrl:"https://github.com/TypeStrong/ts-node/edit/docs/website/docs/paths.md",version:"current",frontMatter:{title:"paths and baseUrl\n"},sidebar:"primarySidebar",previous:{title:"How It Works",permalink:"/ts-node/docs/how-it-works"},next:{title:"Help! My Types Are Missing!",permalink:"/ts-node/docs/types"}},p=[{value:"Why is this not built-in to <code>ts-node</code>?",id:"why-is-this-not-built-in-to-ts-node",children:[]}],l={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," together with ",(0,i.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/tsconfig-paths"},"tsconfig-paths")," to load modules according to the ",(0,i.kt)("inlineCode",{parentName:"p"},"paths")," section in ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "ts-node": {\n    // Do not forget to `npm i -D tsconfig-paths`\n    "require": ["tsconfig-paths/register"]\n  }\n}\n')),(0,i.kt)("h2",{id:"why-is-this-not-built-in-to-ts-node"},"Why is this not built-in to ",(0,i.kt)("inlineCode",{parentName:"h2"},"ts-node"),"?"),(0,i.kt)("p",null,"The official TypeScript Handbook explains the intended purpose for ",(0,i.kt)("inlineCode",{parentName:"p"},'"paths"')," in ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/module-resolution.html#additional-module-resolution-flags"},'"Additional module resolution flags"'),"."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The TypeScript compiler has a set of additional flags to ",(0,i.kt)("em",{parentName:"p"},"inform")," the compiler of transformations that are expected to happen to the sources to generate the final output."),(0,i.kt)("p",{parentName:"blockquote"},"It is important to note that the compiler will not perform any of these transformations; it just uses these pieces of information to guide the process of resolving a module import to its definition file.")),(0,i.kt)("p",null,"This means ",(0,i.kt)("inlineCode",{parentName:"p"},'"paths"')," are intended to describe mappings that the build tool or runtime ",(0,i.kt)("em",{parentName:"p"},"already")," performs, not to tell the build tool or\nruntime how to resolve modules.  In other words, they intend us to write our imports in a way ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," already understands.  For this reason, ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," does not modify ",(0,i.kt)("inlineCode",{parentName:"p"},"node"),"'s module resolution behavior to implement ",(0,i.kt)("inlineCode",{parentName:"p"},'"paths"')," mappings."))}c.isMDXComponent=!0}}]);