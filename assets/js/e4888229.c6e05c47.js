(self.webpackChunk_ts_node_website=self.webpackChunk_ts_node_website||[]).push([[410],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var l=2;l<a;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4350:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return p},toc:function(){return s},default:function(){return c}});var r=n(2122),i=n(9756),a=(n(7294),n(3905)),o={title:"Transpilers"},p={unversionedId:"transpilers",id:"transpilers",isDocsHomePage:!1,title:"Transpilers",description:"In transpile-only mode, we skip typechecking to speed up execution time.  You can go a step further and use a",source:"@site/docs/transpilers.md",sourceDirName:".",slug:"/transpilers",permalink:"/ts-node/docs/transpilers",editUrl:"https://github.com/TypeStrong/ts-node/edit/docs/website/docs/transpilers.md",version:"current",frontMatter:{title:"Transpilers"},sidebar:"primarySidebar",previous:{title:"Third-party compilers",permalink:"/ts-node/docs/compilers"},next:{title:"Module type overrides",permalink:"/ts-node/docs/module-type-overrides"}},s=[{value:"swc",id:"swc",children:[]},{value:"Third-party transpilers",id:"third-party-transpilers",children:[]},{value:"Writing your own integration",id:"writing-your-own-integration",children:[]}],l={toc:s};function c(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In transpile-only mode, we skip typechecking to speed up execution time.  You can go a step further and use a\nthird-party transpiler to transform TypeScript into JavaScript even faster.  You will still benefit from\nts-node's automatic ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," discovery, sourcemap support, and global ts-node CLI.  Integrations\ncan automatically derive an appropriate configuration from your existing ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," which simplifies project\nboilerplate."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"What is the difference between a compiler and a transpiler?")),(0,a.kt)("p",{parentName:"blockquote"},"For our purposes, a compiler implements TypeScript's API and can perform typechecking.\nA third-party transpiler does not.  Both transform TypeScript into JavaScript.")),(0,a.kt)("h2",{id:"swc"},"swc"),(0,a.kt)("p",null,"swc support is built-in via the ",(0,a.kt)("inlineCode",{parentName:"p"},"--swc")," flag or ",(0,a.kt)("inlineCode",{parentName:"p"},'"swc": true')," tsconfig option."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://swc.rs"},(0,a.kt)("inlineCode",{parentName:"a"},"swc"))," is a TypeScript-compatible transpiler implemented in Rust.  This makes it an order of magnitude faster than vanilla ",(0,a.kt)("inlineCode",{parentName:"p"},"transpileOnly"),"."),(0,a.kt)("p",null,"To use it, first install ",(0,a.kt)("inlineCode",{parentName:"p"},"@swc/core")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"@swc/wasm"),".  If using ",(0,a.kt)("inlineCode",{parentName:"p"},"importHelpers"),", also install ",(0,a.kt)("inlineCode",{parentName:"p"},"@swc/helpers"),".  If ",(0,a.kt)("inlineCode",{parentName:"p"},"target"),' is less than "es2015" and using either ',(0,a.kt)("inlineCode",{parentName:"p"},"async"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"await")," or generator functions, also install ",(0,a.kt)("inlineCode",{parentName:"p"},"regenerator-runtime"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm i -D @swc/core @swc/helpers regenerator-runtime\n")),(0,a.kt)("p",null,"Then add the following to your ",(0,a.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "ts-node": {\n    "swc": true\n  }\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"swc")," uses ",(0,a.kt)("inlineCode",{parentName:"p"},"@swc/helpers")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"tslib"),".  If you have enabled ",(0,a.kt)("inlineCode",{parentName:"p"},"importHelpers"),", you must also install ",(0,a.kt)("inlineCode",{parentName:"p"},"@swc/helpers"),".")),(0,a.kt)("h2",{id:"third-party-transpilers"},"Third-party transpilers"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"transpiler")," option allows using third-party transpiler integrations with ts-node.  ",(0,a.kt)("inlineCode",{parentName:"p"},"transpiler")," must be given the\nname of a module which can be ",(0,a.kt)("inlineCode",{parentName:"p"},"require()"),"d.  The built-in ",(0,a.kt)("inlineCode",{parentName:"p"},"swc")," integration is exposed as ",(0,a.kt)("inlineCode",{parentName:"p"},"ts-node/transpilers/swc"),"."),(0,a.kt)("p",null,'For example, to use a hypothetical "speedy-ts-compiler", first install it into your project: ',(0,a.kt)("inlineCode",{parentName:"p"},"npm install speedy-ts-compiler")),(0,a.kt)("p",null,"Then add the following to your tsconfig:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "ts-node": {\n    "transpileOnly": true,\n    "transpiler": "speedy-ts-compiler"\n  }\n}\n')),(0,a.kt)("h2",{id:"writing-your-own-integration"},"Writing your own integration"),(0,a.kt)("p",null,"To write your own transpiler integration, check our ",(0,a.kt)("a",{parentName:"p",href:"https://typestrong.org/ts-node/api/interfaces/TranspilerModule.html"},"API docs"),"."),(0,a.kt)("p",null,"Integrations are ",(0,a.kt)("inlineCode",{parentName:"p"},"require()"),"d by ts-node, so they can be published to npm for convenience.  The module must export a ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," function described by our\n",(0,a.kt)("a",{parentName:"p",href:"https://typestrong.org/ts-node/api/interfaces/TranspilerModule.html"},(0,a.kt)("inlineCode",{parentName:"a"},"TranspilerModule"))," interface.  ",(0,a.kt)("inlineCode",{parentName:"p"},"create")," is invoked by ts-node\nat startup to create the transpiler.  The transpiler is used repeatedly to transform TypeScript into JavaScript."))}c.isMDXComponent=!0}}]);