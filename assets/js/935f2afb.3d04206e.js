"use strict";(self.webpackChunk_ts_node_website=self.webpackChunk_ts_node_website||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"primarySidebar":[{"type":"category","label":"General","collapsed":false,"items":[{"type":"link","label":"Overview","href":"/ts-node/docs/","docId":"overview"},{"type":"link","label":"Installation","href":"/ts-node/docs/installation","docId":"installation"},{"type":"link","label":"Usage","href":"/ts-node/docs/usage","docId":"usage"},{"type":"link","label":"Configuration","href":"/ts-node/docs/configuration","docId":"configuration"},{"type":"link","label":"Options","href":"/ts-node/docs/options","docId":"options"},{"type":"link","label":"CommonJS vs native ECMAScript modules","href":"/ts-node/docs/imports","docId":"imports"},{"type":"link","label":"Troubleshooting","href":"/ts-node/docs/troubleshooting","docId":"troubleshooting"},{"type":"link","label":"Make it fast","href":"/ts-node/docs/performance","docId":"performance"}],"collapsible":true},{"type":"category","label":"Advanced","collapsed":false,"items":[{"type":"link","label":"How It Works","href":"/ts-node/docs/how-it-works","docId":"how-it-works"},{"type":"link","label":"paths and baseUrl\\n","href":"/ts-node/docs/paths","docId":"paths"},{"type":"link","label":"Help! My Types Are Missing!","href":"/ts-node/docs/types","docId":"types"},{"type":"link","label":"Third-party compilers","href":"/ts-node/docs/compilers","docId":"compilers"},{"type":"link","label":"Transpilers","href":"/ts-node/docs/transpilers","docId":"transpilers"},{"type":"link","label":"Module type overrides","href":"/ts-node/docs/module-type-overrides","docId":"module-type-overrides"}],"collapsible":true},{"type":"category","label":"Recipes","collapsed":false,"items":[{"type":"link","label":"Watching and Restarting","href":"/ts-node/docs/recipes/watching-and-restarting","docId":"recipes/watching-and-restarting"},{"type":"link","label":"AVA","href":"/ts-node/docs/recipes/ava","docId":"recipes/ava"},{"type":"link","label":"Gulp","href":"/ts-node/docs/recipes/gulp","docId":"recipes/gulp"},{"type":"link","label":"IntelliJ and Webstorm","href":"/ts-node/docs/recipes/intellij","docId":"recipes/intellij"},{"type":"link","label":"Mocha","href":"/ts-node/docs/recipes/mocha","docId":"recipes/mocha"},{"type":"link","label":"Tape","href":"/ts-node/docs/recipes/tape","docId":"recipes/tape"},{"type":"link","label":"Visual Studio Code","href":"/ts-node/docs/recipes/visual-studio-code","docId":"recipes/visual-studio-code"},{"type":"link","label":"Other","href":"/ts-node/docs/recipes/other","docId":"recipes/other"}],"collapsible":true}],"hiddenSidebar":[{"type":"category","label":"Hidden pages","collapsed":false,"items":[{"type":"link","label":"Options","href":"/ts-node/docs/options-table","docId":"options-table"}],"collapsible":true}]},"docs":{"compilers":{"id":"compilers","title":"Third-party compilers","description":"Some projects require a patched typescript compiler which adds additional features.  For example, ttypescript and ts-patch","sidebar":"primarySidebar"},"configuration":{"id":"configuration","title":"Configuration","description":"ts-node supports a variety of options which can be specified via tsconfig.json, as CLI flags, as environment variables, or programmatically.","sidebar":"primarySidebar"},"how-it-works":{"id":"how-it-works","title":"How It Works","description":"ts-node works by registering hooks for .ts, .tsx, .js, and/or .jsx extensions.","sidebar":"primarySidebar"},"imports":{"id":"imports","title":"CommonJS vs native ECMAScript modules","description":"TypeScript is almost always written using modern import syntax, but it is also transformed before being executed by the underlying runtime.  You can choose to either transform to CommonJS or to preserve the native import syntax, using node\'s native ESM support.  Configuration is different for each.","sidebar":"primarySidebar"},"installation":{"id":"installation","title":"Installation","description":"Tip: Installing modules locally allows you to control and share the versions through package.json. ts-node will always resolve the compiler from cwd before checking relative to its own installation.","sidebar":"primarySidebar"},"module-type-overrides":{"id":"module-type-overrides","title":"Module type overrides","description":"When deciding between CommonJS and native ECMAScript modules, ts-node defaults to matching vanilla node and tsc","sidebar":"primarySidebar"},"options":{"id":"options","title":"Options","description":"ts-node supports --print (-p), --eval (-e), --require (-r) and --interactive (-i) similar to the node.js CLI options.","sidebar":"primarySidebar"},"options-table":{"id":"options-table","title":"Options","description":"\x3c!--","sidebar":"hiddenSidebar"},"overview":{"id":"overview","title":"Overview","description":"ts-node is a TypeScript execution engine and REPL for Node.js.","sidebar":"primarySidebar"},"paths":{"id":"paths","title":"paths and baseUrl\\n","description":"You can use ts-node together with tsconfig-paths to load modules according to the paths section in tsconfig.json.","sidebar":"primarySidebar"},"performance":{"id":"performance","title":"Make it fast","description":"These tricks will make ts-node faster.","sidebar":"primarySidebar"},"recipes/ava":{"id":"recipes/ava","title":"AVA","description":"Assuming you are configuring AVA via your package.json, add one of the following configurations.","sidebar":"primarySidebar"},"recipes/gulp":{"id":"recipes/gulp","title":"Gulp","description":"ts-node support is built-in to gulp.","sidebar":"primarySidebar"},"recipes/intellij":{"id":"recipes/intellij","title":"IntelliJ and Webstorm","description":"Create a new Node.js configuration and add -r ts-node/register to \\"Node parameters.\\"","sidebar":"primarySidebar"},"recipes/mocha":{"id":"recipes/mocha","title":"Mocha","description":"Mocha 7 and newer","sidebar":"primarySidebar"},"recipes/other":{"id":"recipes/other","title":"Other","description":"In many cases, setting NODEOPTIONS will enable ts-node within other node tools, child processes, and worker threads.","sidebar":"primarySidebar"},"recipes/tape":{"id":"recipes/tape","title":"Tape","description":"","sidebar":"primarySidebar"},"recipes/visual-studio-code":{"id":"recipes/visual-studio-code","title":"Visual Studio Code","description":"Create a new Node.js debug configuration, add -r ts-node/register to node args and move the program to the args list (so VS Code doesn\'t look for outFiles).","sidebar":"primarySidebar"},"recipes/watching-and-restarting":{"id":"recipes/watching-and-restarting","title":"Watching and Restarting","description":"TypeScript Node compiles source code via require(), watching files and code reloads are out of scope for the project. If you want to restart the ts-node process on file change, existing node.js tools such as nodemon, onchange and node-dev work.","sidebar":"primarySidebar"},"transpilers":{"id":"transpilers","title":"Transpilers","description":"In transpile-only mode, we skip typechecking to speed up execution time.  You can go a step further and use a","sidebar":"primarySidebar"},"troubleshooting":{"id":"troubleshooting","title":"Troubleshooting","description":"Understanding configuration","sidebar":"primarySidebar"},"types":{"id":"types","title":"Help! My Types Are Missing!","description":"ts-node does not use files, include or exclude, by default. This is because a large majority projects do not use all of the files in a project directory (e.g. Gulpfile.ts, runtime vs tests) and parsing every file for types slows startup time. Instead, ts-node starts with the script file (e.g. ts-node index.ts) and TypeScript resolves dependencies based on imports and references.","sidebar":"primarySidebar"},"usage":{"id":"usage","title":"Usage","description":"Shell","sidebar":"primarySidebar"}}}')}}]);