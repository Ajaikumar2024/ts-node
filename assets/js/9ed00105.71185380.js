(self.webpackChunk_ts_node_website=self.webpackChunk_ts_node_website||[]).push([[4],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return s},kt:function(){return N}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),d=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},s=function(t){var e=d(t.components);return a.createElement(p.Provider,{value:e},t.children)},m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},k=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,p=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),k=d(n),N=r,c=k["".concat(p,".").concat(N)]||k[N]||m[N]||i;return n?a.createElement(c,l(l({ref:e},s),{},{components:n})):a.createElement(c,l({ref:e},s))}));function N(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=k;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},970:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p},default:function(){return s}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l={title:"Configuration"},o={unversionedId:"configuration",id:"configuration",isDocsHomePage:!1,title:"Configuration",description:"ts-node supports a variety of options which can be specified via tsconfig.json, as CLI flags, as environment variables, or programmatically.",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/ts-node/docs/configuration",editUrl:"https://github.com/TypeStrong/ts-node/edit/docs/website/docs/configuration.md",version:"current",frontMatter:{title:"Configuration"},sidebar:"primarySidebar",previous:{title:"Usage",permalink:"/ts-node/docs/usage"},next:{title:"CommonJS vs native ECMAScript modules",permalink:"/ts-node/docs/imports"}},p=[{value:"CLI flags",id:"cli-flags",children:[]},{value:"Via tsconfig.json (recommended)",id:"via-tsconfigjson-recommended",children:[{value:"@tsconfig/bases",id:"tsconfigbases",children:[]}]},{value:"Options",id:"options",children:[]},{value:"<code>node</code> flags",id:"node-flags",children:[]}],d={toc:p};function s(t){var e=t.components,n=(0,r.Z)(t,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," supports a variety of options which can be specified via ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", as CLI flags, as environment variables, or programmatically."),(0,i.kt)("h2",{id:"cli-flags"},"CLI flags"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," CLI flags must come ",(0,i.kt)("em",{parentName:"p"},"before")," the entrypoint script. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"$ ts-node --project tsconfig-dev.json say-hello.ts Ronald\nHello, Ronald!\n")),(0,i.kt)("h2",{id:"via-tsconfigjson-recommended"},"Via tsconfig.json (recommended)"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," automatically finds and loads ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),".  Most ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," options can be specified in a ",(0,i.kt)("inlineCode",{parentName:"p"},'"ts-node"')," object using their programmatic, camelCase names. We recommend this because it works even when you cannot pass CLI flags, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"node --require ts-node/register")," and when using shebangs."),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"--skip-project")," to skip loading the ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),".  Use ",(0,i.kt)("inlineCode",{parentName:"p"},"--project")," to explicitly specify the path to a ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,i.kt)("p",null,"When searching, it is resolved using ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html"},"the same search behavior as ",(0,i.kt)("inlineCode",{parentName:"a"},"tsc")),". By default, this search is performed relative to the entrypoint script. In ",(0,i.kt)("inlineCode",{parentName:"p"},"--cwd-mode")," or if no entrypoint is specified -- for example when using the REPL -- the search is performed relative to ",(0,i.kt)("inlineCode",{parentName:"p"},"--cwd")," / ",(0,i.kt)("inlineCode",{parentName:"p"},"process.cwd()"),"."),(0,i.kt)("p",null,"You can use this sample configuration as a starting point:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  // This is an alias to @tsconfig/node10: https://github.com/tsconfig/bases\n  "extends": "ts-node/node10/tsconfig.json",\n\n  // Most ts-node options can be specified here using their programmatic names.\n  "ts-node": {\n    // It is faster to skip typechecking.\n    // Remove if you want ts-node to do typechecking.\n    "transpileOnly": true,\n\n    "files": true,\n\n    "compilerOptions": {\n      // compilerOptions specified here will override those declared below,\n      // but *only* in ts-node.  Useful if you want ts-node and tsc to use\n      // different options with a single tsconfig.json.\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Our bundled ",(0,i.kt)("a",{parentName:"p",href:"https://unpkg.com/browse/ts-node@latest/tsconfig.schema.json"},"JSON schema")," lists all compatible options."),(0,i.kt)("h3",{id:"tsconfigbases"},"@tsconfig/bases"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/tsconfig/bases"},"tsconfig/bases")," maintains recommended configurations for several node versions.\nAs a convenience, these are bundled with ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="tsconfig.json"',title:'"tsconfig.json"'},'{\n  "extends": "ts-node/node16/tsconfig.json",\n\n  // Or install directly with `npm i -D @tsconfig/node16`\n  "extends": "@tsconfig/node16/tsconfig.json",\n}\n')),(0,i.kt)("h2",{id:"options"},"Options"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," supports ",(0,i.kt)("inlineCode",{parentName:"p"},"--print")," (",(0,i.kt)("inlineCode",{parentName:"p"},"-p"),"), ",(0,i.kt)("inlineCode",{parentName:"p"},"--eval")," (",(0,i.kt)("inlineCode",{parentName:"p"},"-e"),"), ",(0,i.kt)("inlineCode",{parentName:"p"},"--require")," (",(0,i.kt)("inlineCode",{parentName:"p"},"-r"),") and ",(0,i.kt)("inlineCode",{parentName:"p"},"--interactive")," (",(0,i.kt)("inlineCode",{parentName:"p"},"-i"),") similar to the ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/api/cli.html"},"node.js CLI options"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"API options with an * cannot be specified via ",(0,i.kt)("inlineCode",{parentName:"em"},"tsconfig.json"))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"CLI"),(0,i.kt)("th",{parentName:"tr",align:null},"Environment Variable"),(0,i.kt)("th",{parentName:"tr",align:null},"API & tsconfig.json"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-h, --help")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Prints the help text")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-v, --version")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Prints the version. ",(0,i.kt)("inlineCode",{parentName:"td"},"-vv")," prints node and typescript compiler versions, too.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-c, --cwd-mode")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Resolve config relative to the current directory instead of the directory of the entrypoint script.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--script-mode")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Resolve config relative to the directory of the entrypoint script. This is the default behavior.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-T, --transpile-only")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_TRANSPILE_ONLY")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"transpileOnly")),(0,i.kt)("td",{parentName:"tr",align:null},"Use TypeScript's faster ",(0,i.kt)("inlineCode",{parentName:"td"},"transpileModule")," (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--type-check")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_TYPE_CHECK")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Opposite of ",(0,i.kt)("inlineCode",{parentName:"td"},"--transpile-only"),". (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"true"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-H, --compiler-host")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_COMPILER_HOST")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"compilerHost")),(0,i.kt)("td",{parentName:"tr",align:null},"Use TypeScript's compiler host API (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-I, --ignore [pattern]")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_IGNORE")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ignore")),(0,i.kt)("td",{parentName:"tr",align:null},"Override the path patterns to skip compilation (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"/node_modules/"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-P, --project [path]")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_PROJECT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"project")),(0,i.kt)("td",{parentName:"tr",align:null},"Path to TypeScript JSON project file")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-C, --compiler [name]")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_COMPILER")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"compiler")),(0,i.kt)("td",{parentName:"tr",align:null},"Specify a custom TypeScript compiler (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"typescript"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-D, --ignore-diagnostics [code]")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_IGNORE_DIAGNOSTICS")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ignoreDiagnostics")),(0,i.kt)("td",{parentName:"tr",align:null},"Ignore TypeScript warnings by diagnostic code")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"-O, --compiler-options [opts]")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_COMPILER_OPTIONS")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"compilerOptions")),(0,i.kt)("td",{parentName:"tr",align:null},"JSON object to merge with compiler options")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--cwd")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_CWD")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Behave as if invoked in this working directory. (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"process.cwd()"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--files")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_FILES")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"files")),(0,i.kt)("td",{parentName:"tr",align:null},"Load ",(0,i.kt)("inlineCode",{parentName:"td"},"files"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"include")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"exclude")," from ",(0,i.kt)("inlineCode",{parentName:"td"},"tsconfig.json")," on startup (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--pretty")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_PRETTY")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"pretty")),(0,i.kt)("td",{parentName:"tr",align:null},"Use pretty diagnostic formatter (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--skip-project")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_SKIP_PROJECT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"skipProject")),(0,i.kt)("td",{parentName:"tr",align:null},"Skip project config resolution and loading (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--skip-ignore")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_SKIP_IGNORE")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"skipIgnore")),(0,i.kt)("td",{parentName:"tr",align:null},"Skip ignore checks (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--emit")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_EMIT")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"emit")),(0,i.kt)("td",{parentName:"tr",align:null},"Emit output files into ",(0,i.kt)("inlineCode",{parentName:"td"},".ts-node")," directory (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--prefer-ts-exts")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_PREFER_TS_EXTS")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"preferTsExts")),(0,i.kt)("td",{parentName:"tr",align:null},"Re-order file extensions so that TypeScript imports are preferred (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--log-error")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_LOG_ERROR")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"logError")),(0,i.kt)("td",{parentName:"tr",align:null},"Logs TypeScript errors to stderr instead of throwing exceptions (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--show-config")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Print resolved ",(0,i.kt)("inlineCode",{parentName:"td"},"tsconfig.json"),", including ",(0,i.kt)("inlineCode",{parentName:"td"},"ts-node")," options, and exit.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--transpiler [name]")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"transpiler")),(0,i.kt)("td",{parentName:"tr",align:null},"Specify a third-party, non-typechecking transpiler")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_DEBUG")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Enable debug logging.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_HISTORY")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Path to history file for REPL. (default; ",(0,i.kt)("inlineCode",{parentName:"td"},"~/.ts_node_repl_history"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--scope")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TS_NODE_SCOPE")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"scope")),(0,i.kt)("td",{parentName:"tr",align:null},"Scope compiler to files within ",(0,i.kt)("inlineCode",{parentName:"td"},"scopeDir"),".  Files outside this directory will be ignored.  (default: ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"scopeDir")),(0,i.kt)("td",{parentName:"tr",align:null},"Sets directory for ",(0,i.kt)("inlineCode",{parentName:"td"},"scope"),".  Defaults to tsconfig ",(0,i.kt)("inlineCode",{parentName:"td"},"rootDir"),", directory containing ",(0,i.kt)("inlineCode",{parentName:"td"},"tsconfig.json"),", or ",(0,i.kt)("inlineCode",{parentName:"td"},"cwd"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"projectSearchDir")),(0,i.kt)("td",{parentName:"tr",align:null},"Search for config file in this or parent directories.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"transformers"),"*"),(0,i.kt)("td",{parentName:"tr",align:null},"An object with transformers or a factory function that accepts a program and returns a transformers object to pass to TypeScript. Factory function cannot be used with ",(0,i.kt)("inlineCode",{parentName:"td"},"transpileOnly")," flag")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"readFile"),"*"),(0,i.kt)("td",{parentName:"tr",align:null},"Custom TypeScript-compatible file reading function")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"fileExists"),"*"),(0,i.kt)("td",{parentName:"tr",align:null},"Custom TypeScript-compatible file existence function")))),(0,i.kt)("h2",{id:"node-flags"},(0,i.kt)("inlineCode",{parentName:"h2"},"node")," flags"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/api/cli.html"},(0,i.kt)("inlineCode",{parentName:"a"},"node")," flags")," must be passed directly to ",(0,i.kt)("inlineCode",{parentName:"p"},"node"),"; they cannot be passed to the ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," binary nor can they be specified in ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json")),(0,i.kt)("p",null,"We recommend using the ",(0,i.kt)("a",{parentName:"p",href:"https://nodejs.org/api/cli.html#cli_node_options_options"},(0,i.kt)("inlineCode",{parentName:"a"},"NODE_OPTIONS"))," environment variable to pass options to ",(0,i.kt)("inlineCode",{parentName:"p"},"node"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"NODE_OPTIONS='--trace-deprecation --abort-on-uncaught-exception' ts-node ./index.ts\n")),(0,i.kt)("p",null,"Alternatively, you can invoke ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," directly and install ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," via ",(0,i.kt)("inlineCode",{parentName:"p"},"--require"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"-r")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"node --trace-deprecation --abort-on-uncaught-exception -r ts-node/register ./index.ts\n")))}s.isMDXComponent=!0}}]);