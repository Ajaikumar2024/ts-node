(self.webpackChunk_ts_node_website=self.webpackChunk_ts_node_website||[]).push([[827],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5644:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return l},default:function(){return c}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a={title:"Usage"},s={unversionedId:"usage",id:"usage",isDocsHomePage:!1,title:"Usage",description:"Shell",source:"@site/docs/usage.md",sourceDirName:".",slug:"/usage",permalink:"/ts-node/docs/usage",editUrl:"https://github.com/TypeStrong/ts-node/edit/docs/website/docs/usage.md",version:"current",frontMatter:{title:"Usage"},sidebar:"primarySidebar",previous:{title:"Installation",permalink:"/ts-node/docs/installation"},next:{title:"Configuration",permalink:"/ts-node/docs/configuration"}},l=[{value:"Shell",id:"shell",children:[]},{value:"Shebang",id:"shebang",children:[]},{value:"Programmatic",id:"programmatic",children:[{value:"Developers",id:"developers",children:[]}]}],p={toc:l};function c(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"shell"},"Shell"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"# Execute a script as `node` + `tsc`.\nts-node script.ts\n\n# Starts a TypeScript REPL.\nts-node\n\n# Execute code with TypeScript.\nts-node -e 'console.log(\"Hello, world!\")'\n\n# Execute, and print, code with TypeScript.\nts-node -p -e '\"Hello, world!\"'\n\n# Pipe scripts to execute with TypeScript.\necho 'console.log(\"Hello, world!\")' | ts-node\n\n# Equivalent to ts-node --transpile-only\nts-node-transpile-only script.ts\n\n# Equivalent to ts-node --cwd-mode\nts-node-cwd script.ts\n")),(0,i.kt)("h2",{id:"shebang"},"Shebang"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'#!/usr/bin/env ts-node\n\nconsole.log("Hello, world!")\n')),(0,i.kt)("p",null,"Passing CLI arguments via shebang is allowed on Mac but not Linux.  For example, the following will fail on Linux:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"#!/usr/bin/env ts-node --files\n// This shebang is not portable.  It only works on Mac\n")),(0,i.kt)("p",null,"Instead, specify all ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," options in your ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"."),(0,i.kt)("h2",{id:"programmatic"},"Programmatic"),(0,i.kt)("p",null,"You can require ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," and register the loader for future requires by using ",(0,i.kt)("inlineCode",{parentName:"p"},"require('ts-node').register({ /* options */ })"),". You can also use file shortcuts - ",(0,i.kt)("inlineCode",{parentName:"p"},"node -r ts-node/register")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"node -r ts-node/register/transpile-only")," - depending on your preferences."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note:")," If you need to use advanced node.js CLI arguments (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"--inspect"),"), use them with ",(0,i.kt)("inlineCode",{parentName:"p"},"node -r ts-node/register")," instead of the ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," CLI."),(0,i.kt)("h3",{id:"developers"},"Developers"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"ts-node")," exports a ",(0,i.kt)("inlineCode",{parentName:"p"},"create()")," function that can be used to initialize a TypeScript compiler that isn't registered to ",(0,i.kt)("inlineCode",{parentName:"p"},"require.extensions"),", and it uses the same code as ",(0,i.kt)("inlineCode",{parentName:"p"},"register"),"."))}c.isMDXComponent=!0}}]);