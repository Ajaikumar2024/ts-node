(self.webpackChunk_ts_node_website=self.webpackChunk_ts_node_website||[]).push([[460],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=r.createContext({}),l=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,y=d["".concat(a,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(y,s(s({ref:t},c),{},{components:n})):r.createElement(y,s({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,s=new Array(i);s[0]=d;var p={};for(var a in t)hasOwnProperty.call(t,a)&&(p[a]=t[a]);p.originalType=e,p.mdxType="string"==typeof e?e:o,s[1]=p;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2850:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return p},toc:function(){return a},default:function(){return c}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),s={title:"Help! My Types Are Missing!"},p={unversionedId:"types",id:"types",isDocsHomePage:!1,title:"Help! My Types Are Missing!",description:"ts-node does not use files, include or exclude, by default. This is because a large majority projects do not use all of the files in a project directory (e.g. Gulpfile.ts, runtime vs tests) and parsing every file for types slows startup time. Instead, ts-node starts with the script file (e.g. ts-node index.ts) and TypeScript resolves dependencies based on imports and references.",source:"@site/docs/types.md",sourceDirName:".",slug:"/types",permalink:"/ts-node/docs/types",editUrl:"https://github.com/TypeStrong/ts-node/edit/docs/website/docs/types.md",version:"current",frontMatter:{title:"Help! My Types Are Missing!"},sidebar:"primarySidebar",previous:{title:"paths and baseUrl\n",permalink:"/ts-node/docs/paths"},next:{title:"Third-party compilers",permalink:"/ts-node/docs/compilers"}},a=[],l={toc:a};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"ts-node does ",(0,i.kt)("em",{parentName:"p"},"not")," use ",(0,i.kt)("inlineCode",{parentName:"p"},"files"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"include")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"exclude"),", by default. This is because a large majority projects do not use all of the files in a project directory (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"Gulpfile.ts"),", runtime vs tests) and parsing every file for types slows startup time. Instead, ts-node starts with the script file (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"ts-node index.ts"),") and TypeScript resolves dependencies based on imports and references."),(0,i.kt)("p",null,"For global definitions, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"typeRoots")," compiler option.  This requires that your type definitions be structured as type packages (not loose TypeScript definition files). More details on how this works can be found in the ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/tsconfig-json.html#types-typeroots-and-types"},"TypeScript Handbook"),"."),(0,i.kt)("p",null,"Example ",(0,i.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "typeRoots" : ["./node_modules/@types", "./typings"]\n  }\n}\n')),(0,i.kt)("p",null,"Example project structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"<project_root>/\n-- tsconfig.json\n-- typings/\n  -- <module_name>/\n    -- index.d.ts\n")),(0,i.kt)("p",null,"Example module declaration file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"declare module '<module_name>' {\n    // module definitions go here\n}\n")),(0,i.kt)("p",null,"For module definitions, you can use ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping"},(0,i.kt)("inlineCode",{parentName:"a"},"paths")),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "compilerOptions": {\n    "baseUrl": ".",\n    "paths": {\n      "custom-module-type": ["types/custom-module-type"]\n    }\n  }\n}\n')),(0,i.kt)("p",null,"An alternative approach for definitions of third-party libraries are ",(0,i.kt)("a",{parentName:"p",href:"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html"},"triple-slash directives"),". This may be helpful if you prefer not to change your TypeScript ",(0,i.kt)("inlineCode",{parentName:"p"},"compilerOptions")," or structure your custom type definitions when using ",(0,i.kt)("inlineCode",{parentName:"p"},"typeRoots"),". Below is an example of the triple-slash directive as a relative path within your project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'/// <reference types="./types/untyped_js_lib" />\nimport UntypedJsLib from "untyped_js_lib"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Tip:")," If you ",(0,i.kt)("em",{parentName:"p"},"must")," use ",(0,i.kt)("inlineCode",{parentName:"p"},"files"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"include"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"exclude"),", enable ",(0,i.kt)("inlineCode",{parentName:"p"},"--files")," flags or set ",(0,i.kt)("inlineCode",{parentName:"p"},"TS_NODE_FILES=true"),"."))}c.isMDXComponent=!0}}]);